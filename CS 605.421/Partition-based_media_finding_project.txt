 


Foundations of Algorithms 
Programming Project #1 
Spring 1998 
March 11th, 1998
JD Durick

Assignment #1
 
In this project, I want you to implement two methods for  finding a median   
of a random set of numbers. For the purpose of this project, you may always work with  
an odd number of data, so that we need not worry about the definition of median for an  
even number of data. The two methods are: (A) Sort the numbers using the mergesort  
algorithm (it must be an implemented from 'scratch' by you and not, for example, the  
UNIX 'sort' command) and find the middle number. (B) Use the partition function from  
the Quicksort, as discussed in class to find the median with partial, but not complete,
sorting.	
In this project, you are to compare the run time performance of both  
algorithms, with each other, on randomly generated input sets, as the size of the input data  
set increases over at least 4 powers of 10. Be sure that you are only comparing processing  
runtimes in this project and not other overhead required to generate the data or calculate any  
performance measures. Also, be sure to test both algorithms on the same data sets, so that  
comparisons are meaningful. If you are using a multi-user computer (for example, the  
APLCEN multiprocessor computer) then you may want to average several identical runs  
with various loadings to get steady-state run times. If it is not possible to obtain access to  
the machine clock, then you may wish to, for example, put the computation in a big loop  
(repeating it several times to build a measurable processing time), measure the time with a
stopwatch, and divide by the number of iterations of the loop.
 
To aid in the analysis, you should also consider the state of the input data  
after the median is found. Of course, the data will be sorted (hopefully) in algorithm A, but  
the degree of disorder left in the data in algorithm B should influence the runtime  
performance improvement (if any) in algorithm B. Devise a figure-of-merit to quantify  
disorder (one based on counting inversions, for example, is presented below.) 

	 
2.)	Comparisons of the implementation run times, by chart or graph, so
—
the comparisons are readily interpreted.
3.)	For each implementation, a comparison of actual run time with
 
predicted.
*	4.) A discussion of design decisions, implementation problems, etc.  
involved in doing this project.
5.) Some measure of the extent of partial sorting one by the partition-based  
median finding algorithm. A reasonable method for doing this is to count the number of
inversions (an inversion in a list of data is a pair (a,b) such that a>b) in the data as a  
measure of disorder. A sorted set would have 0 inversions. You may wish to consider the  
count of inversions after finding the median divided by the number of inversions in the data  
before processing as a measure of extent of remaining disorder in the data. (Note: Do not
count the run  time re uired to compute the	inversions in your run time. This is  
used for analysis and not as part of the median finding algorithm. Also, verify that you are   
correctly counting inversions and include the test cases to show verification in your project
write-up.) You may want to look at the ratio of inversions for several random cases of a  
fixed data size (to see the variance) and as a function of input size in your analysis.
 
 
 
Partition-based Median Analysis
 


	 
 
 
SECTION I: Comparisons of Sorting Algorithm Efficiency(Partition/Merge Sort)
Merge Sort:
Definition
Approach
Diagram Example
Methodology
Implementation
Algorithm of Merge functions (source code)
Analysis of Efficiency
Verification that Merge Sort implementation sorted correctly

Partition Algorithm:
Definition
Approach
Methodology
Implementation
Diagram Example
Correctness of the partitioning algorithm
Analysis of Efficiency

Implementation Problems and Discoveries:
Processor speed problems
System errors
Small vs. Large files
Inversions

SECTION II: Data analysis program using Merge Sort and Partition Sort (Source Code)
Abstract:
To implement two methods (Merge Sort and Quick Sort) for finding a median of random set of numbers by sorting those numbers in ascending order. Also, to compare the run-time performance of both algorithms with each other on odd randomly generated input sets as the size of the input increases at least four powers of ten. In addition, the partition function from Quick Sort is used to find the median with partial, but not complete sorting.

SECTION III: Four example Test Cases - where the Array size is (1, 11, 101, 1001) where the size of n had to increase by four powers of ten. 
Test1.dat (n=1)
Test2.dat (n=11)
Test3.dat (n=101)
Test4.dat (n=1001) 


SECTION IV: Run Time Comparisons Between Merge Sort and Quick Sorts Partitioning Algorithm
Fields:
# of runs
n = 1, 11, 101, 1001 for the Partition function
n = 1, 11, 101, 1001 for Merge Sort
Difference between each of those with respect to their array sizes
Average time after 20 runs

SECTION V: Ratio of Inversions Chart on Random Cases of Fixed Data Sizes
Purpose:
To gain an understanding of how much the number of inversions in a data set can vary and to discover that as the number of inversions grows, so does the run time in some algorithms.

SECTION VI: Sort Comparison Analysis of Average Run Times for Merge/Partition Sort 
Types of Charts:
Average Merge Sort(actual) vs. Predicted Merge Sort
Average Partition function(actual) vs. Predicted Partition function
Average Merge Sort vs. Average Quick Sorts Partitioning function when n = 1
Average Merge Sort vs. Average Quick Sorts Partitioning function when n = 11
Average Merge Sort vs.Average Quick Sorts Partitioning function when n = 101
Average Merge Sort vs.Average Quick Sorts Partitioning function when n = 1001 









Comparison of Sorting Algorithm Efficiency
(Quick Sorts Partitioning Algorithm vs. Merge Sort)
SECTION I
Implementation and Design with Merge Sort:
* Definition (Merge Sort): A divide and conquer algorithm that uses recursion to  
split the list into bite sized portions, sort them, and merge them back together again.
* Approach: Split the list, sort the list and join the list back again. 
Diagram Example: fin 41;1 4ilv <Me Ai Li
-
 
	3333333
	 
 

IC	Ai	029

 
 

 

10	 	is	 	 

 

 
* Methodology:
(a). Break up the list into two unsorted halves.
(b). Repeat that step until one or two items remain
1.	Sort the items
2.	Merge the items
(c). Merge your way back to the original list
 
Merge Sort algorithm: (Source Code)  
Merge() and MergeSort()
void MergeSort(int a[MAX], int f, int 1)
int mid;
if(f<1){
mid = (f + 1) / half;  
MergeSort(a, f, mid);  
MergeSort(a, mid + 1, 1);  
Merge(a, f, mid, 1);
return;
void Merge(int a[MAX], int f, int mid, int 1)  
//declare local variables
int tempArray[MAX];
int	firstl = f;
int	last! = mid;
int	first2 = mid + 1;
int	last2 = 1;
int	index;
 
for ( index = first 1; (first! <= last 1) && (first2 <= last2) index++ )
•	if( a[firstl] < a[first2] )
tempArray[index] = a[firstl]; 
first 1++;
else
tempArray[index] = a[first2]; 
first2++;
for ( index; firstl <= lastl; firstl++, index++ )
tempArray[index] = a[first 1 ] ;
for ( index; first2 c= 1ast2; first2++, index++ )
tempArray[index] = a[first2];
for ( index = f; index <= 1; index++ )
a[index] = tempArray[index];
return;
Analysis of Efficiency:
The function MergeSort() inputs an array of n integers (ie. A[f...1]) and  
outputs a[f...1] which is sorted in ascending order. The MergeSort function  
recursively calls itself on 2 halves of the list. The base case is two items that can be  
compared directly or a single item which is solved already. The two sorted halves  
must be merged together.
The function Merge() merges two sorted array segments a[f...1] and  
a[mid+1...1] into one sorted array This function has inputs from two subarrays,  
a[f...mid] and a[mid+1...1] which are each sorted in increasing order. What outputs  
is a[f...1] sorted. The way we do this is to copy the smaller item at index I into the  
temporary array. When complete, it copies the rest of the remaining array into the  
temporary array, then transfers to the original array. To reiterate, this function  
merges two subarrays into a temporary array and copies the result into the original  
array a.
The merge step has 3 assignment loop and one reassignment loop.
1.	The assignment loops account for n1 comparisons and n  
assignments.
2.	The reassignment loop accounts for n assignments.
3.	Thus, the merge pass has 3(n-1) operations.
Each call to MergeSort recursively calls itself twice, one on each half of the list. In
an identical manner to how the number of passes is calculated for binary search, we  
can determine that the number of recursive calls to MergeSort will be 1og2n for even
n and 1+log2N for odd n. Each call to MergeSort calls Merge sort once. By  
knowing that there will be 2m calls to Merge, each of which will merge n/2m items,
we can derive that this algorithm is o(nLog2n).
*	Verification that Merge Sort implementation is indeed sorting the numbers
correctly:
You can do this by calling a function called test_sort() which is very similar  
to the inversions function. This function does a brute-force comparing each element  
in the array making sure that it is smaller than the one that comes after it. If this  
function is called and the number of inversion != 0, then your sorting algorithm is  
not working properly. Also, I created a function called median() that will find the  
median of the array before the sorting takes place and after the sorting has been  
completed.
Implementation and Design with Quick Sorts Partitioning  
Algorithm:
*	Definition (Partition Sort): A divide and conquer method of sorting. It works by  
partitioning a list into 2 parts, then sorting the parts independently. All  
implementations of partition require the notion of a pivot value. Pivot is chosen  
from the sublist of elements to be sorted. You could choose any element you want  
to act as the pivot, left most element, right most element, or the element in the  
middle.
*	Approach: We locate a pivot point around which to partition the list, partition the  
regions, and recursively call the algorithm. Since we are not implementing the quick  
sort algorithm, we will not have to worry about sorting the left/right sides of the  
array. Our goal is to find the median element after the pivot value has come to its  
final resting place
*	Methodology:
1.	Partitioning: Place the pivot point in the first position and make the  
remainder of the list unknown.
2.	Select the first item in the unknown region and place it into the correct
region(s1 or s2) according to the metric
* Implementation:
1. Partitioning: tests for range limit on the list indexes and recursively calls  
itself Also, it assigns indexes for the regions, loops through all the unknown  
elements and places them in sl or s2 according to whether they are greater or less  
than the pivot.
Steps for implementing the partition function:
1.	Set index I to A - 1
2.	Set index j to the end of the array
3.	Now scan in both directions by incrementing Ito the right and  
decrememting j to the left.
4.	For I, scan until you find an item larger than the pivot
5.	For j, scan until you find an item smaller than the pivot
6.	These locations represent item that are out of place, now swap them
7.	Continue scanning, swapping at the next stopping point of the two  
indices.
8.	The process will continue until the indices cross
9.	At this point, the array is fully partitioned
0.	The pivot element is swapped and put into the final resting place
After the pivot element comes to its final resting place, print your current array.  
Find the median element of that array and calculate the time in which it took to find  
that median. After finding the run-time, call the inversions function to see how  
many inversions are in the partially sorted array. It should be greater than or equal  
to merge sorts number of inversions. Merge sort will always be 0 (as long as the  
algorithm is running correctly) but the partition algorithm will always generate a  
number greater than or equal to 0.
 
* Diagram Example:
Example of array with SIZE = 5
Initial Array:

orl	10	H	ST	 

1	 
knoon
	14	St 	I 13
·	Tiver 	s‘C kao in
,29	io 	19	1  -34	T 
/a.   <— sj
,D	t sa
34	onows,r\ k
13
s,	_>
)o	1	it/	r  is 	L 37	I 
<	 SI	wet.	Sa

10	19	 	1	13 	 	1	021	84- 	]

 


* Correctness of the partitioning algorithm (an iterative algorithm)
1.	There must be an invariant
2.	The invariant must be true initially
a. Pivot is the first element, the unknown region is the remainder of the
list and sl and s2 are empty
3.	Execution of a loop pass must preserve the invariant
a. A single element from the unknown region has been properly placed
in sl or s2.
4.	The invariant must be true when the loop terminates
5.	When an unknown region is empty, each of the previously unknown  
elements has been properly placed into sl or s2.
6.	The loop must terminate
a. The unknown region decreases in size by on each pass, so the loop
will always terminate.
* Analysis of Efficiency:
One of the most disturbing feature about this algorithm is that it is very  
inefficient on simple files. The worst case scenario is when the array is already  
sorted. In this case, there will be n-1 comparisons on the first pass, n-2 comparisons  
on the second pass leading to 1+2+...+(n-1) = n(n-1)/2 comparisons.
If s2 remains empty instead of sl, then the same number of comparisons is  
required, but now there are the same number of exchanges.
When the array is ordered in such a way that sl ans s2 are relatively the same  
size, fewer recursive calls are made, and the same rationale that was used for merge  
sort can be used here. The average case for partition sort is 1og2n or 1+ 1og2n  
recursive calls. So it can be said that in the average case, Partition sort is  
0(nlog2n).
* Algorithm Efficiency Comparison:

Algorithm	Worst Case	Average Case
Partition Sort	n2	n*10g2n
Merge Sort	n*10g2n	n*log2n

Implementation Problems and Discoveries:
1.	When running my test cases, the times for merge and partition sort were  
always 0.00. So I had to implement a for loop that counter act the Pentium  
processor speed. I set it to loop 500 times for n=1, 11, 101 and 50 times when  
n=1001.
2.	When testing both algorithms with n >= 10000, I kept receiving a system  
error when trying to compile my program
3.	Discovered that Merge sort runs faster with smaller files compared to  
partition sort which is very inefficient with small files. But as N grew quickly,  
partition sort became more efficient than merge sort. 
SECTION II
Program:  sort.c



SECTION III
 
Four Example Test Cases
(where n = 1, 11, 101, 1001)
 
•
 
 
 
TEST1.DAT	March 8, 1998	Page 1
1	Welcome to the Merge sort / Partition sort Analysis program.
2	************************************************************
3
4	This program implements two methods (Merge sort and Partition sort) for
5	finding the median in random numbers. Also, the program will compare the run
0 time performance of both algorithms with each other on randomly generated  
input sets as the size of the input data set increases over at least  
four powers of ten. In addition, the partition function from Quick
9	Sort is used to find the median with partial, but not complete sorting
10
11	MENU
12	***************************
13	1. Compare the MERGE SORT vs. PARTITION SORT algorithms.
14	2. Quit the program
15
16	(A). Our DATA SET contains 1 elements.
17	(B). Here are the UNSORTED numbers for both SORTS:
18
19	34
20
21	(C). MERGE SORT ANALYSIS of RANDOM DATA SET:
22	*MEDIAN (before the array is sorted) of array size 1 is: 34
23	*NUMBER OF INVERSION(S) (before sort) in 1 element array: 0.0
24
25
26	(D). MERGE SORT:
27	*Time Started: 1.430
28	*Time Ended: 1.430
29	*Total time during Merge Sort run: 0.000
30
31
32	(E). Here are the sorted numbers using MERGE SORT:
33
  
Array Size = 1 
34 
37
38	*MEDIAN (after the array is sorted) is 34.
39	*NUMBER OF INVERSION(S) (after sort): 0
40
41	(F). FINDING THE PARTITIONING ELEMENT:
42
43	34
44	*Time Started: 1.430
45	*Time Ended: 1.430
46	*Total time it took to find the Partition element: 0.000
47
48	*After the array is partitioned and the pivot element
49	equals the median, the array is finally sorted using the
50 pivot element which allows the left and right sides of the
51	array to be sorted.
52
53 Array Size = 1
54
55	34
56
57	(G). DATA ANALYSIS:
58
59	********* MEAN *********
60	The mean is the average value of the data items. The mean is equal
61	to the total of all the data items divided by the number of data items (1).  
410 The mean value for this run is 34.0 /1 = 34.00.
 
TEST2.DAT	March 8, 1998	Page 1
1	Welcome to the Merge sort / Partition sort Analysis program.
2	************************************************************  
3
4	This program implements two methods (Merge sort and Partition sort) for 
  
5	finding the median in random numbers. Also, the program will compare the run  
time performance of both algorithms with each other on randomly generated  
input sets as the size of the input data set increases over at least  
four powers of ten. In addition, the partition function from Quick  
9	Sort is used to find the median with partial, but not complete sorting
10
11	MENU
12	***************************
13	1. Compare the MERGE SORT vs. PARTITION SORT algorithms.  
14	2. Quit the program
15
16	(A). Our DATA SET contains 11 elements.
17	(B). Here are the UNSORTED numbers for both SORTS:
18
19	90 21 82 27 96 58 96 68 55 6 38
20
21	(C). MERGE SORT ANALYSIS of RANDOM DATA SET:
22	*MEDIAN (before the array is sorted) of array size 11 is: 58
23	*NUMBER OF INVERSION(S) (before sort) in 11 element array: 33.0.  
24
25
26	(D). MERGE SORT:
27	*Time Started: 1.650
28	*Time Ended: 1.650
29	*Total time during Merge Sort run: 0.000 
30
31
32	(E). Here are the sorted numbers using MERGE SORT: 
33
Array Size = 11
.56	6 21 27 38 55 58 68 82 90 96 96 
37
38	*MEDIAN (after the array is sorted) is 58.
39	*NUMBER OF INVERSION(S) (after sort): 0 
40
41	(F). FINDING THE PARTITIONING ELEMENT: 
42
43	*Here is the point at which the PIVOT element equals the MEDIAN element:  
44
45	6 21 27 38 55 58 68 82 96 90 96 
46
47	*MEDIAN (after the array is sorted) is 58.
48	*NUMBER OF INVERSION(S) (after sort) in 11 element array: 1.0.  
49
50	*Time Started: 1.650
51	*Time Ended: 1.698
52	*Total time it took to find the Partition element: 0.048  
53
54	*After the array is partitioned and the pivot element
55	equals the median, the array is finally sorted using the  
56 pivot element which allows the left and right sides of the  
57	array to be sorted.
58
59	Array Size = 11 
60
.	6 21 27 38 55 58 68 82 90 96 96 
64
65
 
66 The mean is the average value of the data items. The mean is equal
67	to the total of all the data items divided by the number of data items (11).
68	The mean value for this run is 637.0 /11 = 57.91.
69
•
 
 
 
•
 
TEST3.DAT	March 8, 1998	Page 1
1	Welcome to the Merge sort / Partition sort Analysis program.
2	************************************************************
3
4	This program implements two methods (Merge sort and Partition sort) for 
5	finding the median in random numbers. Also, the program will compare the run 
0
  
time performance of both algorithms with each other on randomly generated  
input sets as the size of the input data set increases over at least  
four powers of ten. In addition, the partition function from Quick  
9	Sort is used to find the median with partial, but not complete sorting
10
11	MENU
12	******4,********************
13	1. Compare the MERGE SORT vs. PARTITION SORT algorithms.
14	2. Quit the program
15
16	(A). Our DATA SET contains 101 elements.
17	(B). Here are the UNSORTED numbers for both SORTS:
18
	19	20 47 57 49 10 65
	20	34 78 13 10 79 4
	21	75 21 1 48 56 17
	22	29 47 56 94 56 61
	23	5 71 22 63 78 93
	24	29
25
	26	(C). MERGE SORT ANALYSIS of RANDOM DATA SET:
	27	*MEDIAN (before the array is sorted) of array size 101 is: 4
	28	*NUMBER OF INVERSION(S) (before sort) in 101 element array: 2339.0.
29
30
	31	(D). MERGE SORT:
	32	*Time Started: 1.370
	33	*Time Ended: 1.590
	W	*Total time during Merge Sort run: 0.220
36
	37	(E). Here are the sorted numbers using MERGE SORT:
 
38
39	Array Size = 101
40
41	0 1 4 4 4 4 5 5 5 6 7 7 10 10 10
42	17 18 20 21 21 22 23 25 29 29 30 32 34 37 38
43	43 45 47 47 48 49 49 52 54 55 56 56 56 56 57
44	62 62 63 63 64 65 65 66 66 67 67 70 71 72 74
45	78 78 79 81 81 81 81 84 85 87 87 90 90 91 91
46	97
47
48	*MEDIAN (after the array is sorted) is 56.
49	*NUMBER OF INVERSION(S) (after sort): 0
50
51	(F). FINDING THE PARTITIONING ELEMENT:
52
53	*Here is the point at which the PIVOT element
54
55	0 1 4 4 4 4 5 5 5 6 7 7 10 10 10
56	17 18 20 21 21 22 23 25 29 29 30 32 34 37 38
57	43 45 47 47 48 49 49 52 54 55 56 56 56 56 57
58	57 62 63 63 67 77 81 66 87 70 67 76 74 92 81
59	65 71 78 92 78 93 91 87 85 79 65 75 91 77 84
60	94
 
*MEDIAN (after the array is sorted) is 56.
*NUMBER OF INVERSION(S) (after sort) in 101 element array: 279.0.
-64
65	*Time Started: 1.370
 
TEST3.DAT	March 8, 1998	Page 2
66	*Time Ended: 1.800
67	*Total time it took to find the Partition element: 0.430
68
69	*After the array is partitioned and the pivot element
70		equals the median, the array is finally sorted using the 
111 pivot element which allows the left and right sides of the 
array to be sorted.
73
74	Array Size	101
75
76
77
78
79
80
81
82
83
84
85	********* MEAN *********
86 The mean is the average value of the data items. The mean is equal
87	to the total of all the data items divided by the number of data items (101).
88	The mean value for this run is 5020.0 /101 = 49.70.
89
•
 

TEST4.DAT	March 8,	1998	Page
1	Welcome to the Merge sort / Partition sort Analysis program.
2	************************************************************
3
4	This program implements two methods	(Merge sort and Partition sort)	for
5	finding the median in random numbers.	Also, the program will compare the run 
iS	time performance of both algorithms with each other on randomly generated
 	input sets as the size of the input data set increases over at least
8	four powers of ten.	In addition,	the partition function from Quick
9	Sort is used to find the median with partial, but not complete sorting
10	 	 	 	 
11	 	MENU	 	 
12	 	***************************	 	 
13	1.	Compare the MERGE SORT vs. PARTITION SORT algorithms.
14	2.	Quit the program	 	 
15	 	 	 	 
16	(A).	Our DATA SET contains 1001 elements.	 	 
17	(B).	Here are the UNSORTED numbers for both SORTS:	 
18	 	 	 	 
19	14	93	22 41	82	2 28 36	6 64	96	3	7	3 52	49 24	0	33 12
20	95 74	379	4	60 28 72	7	16 25 88 50 26	2	65 61	87	79 92
21	71 24	83 45 61 97 45 19	89 18 57	65 61 55 99	43 22 65	53 42
22	51 53	38 49 22 56	7	64 47 75 81 13 12 43 53	65 24 60	19	5
23	59 22	61 72 23 93 78 73 55 37 74	17 44	1 48	30 99	4	17 30
24	38 85	92 77	15 54	42	62 74 62 75 63 50 99	15	79 37	80	61 45
25	27 92	33	1	4 51	3 67	18 57 92	67	85 82 58	23 78 56	2	11
26	70 55	8 73 22 38	68	12	83 59 96 27	35 15 91	42	6 16	85 20
27	22 35	39 51 29 20 27 79 96 17	64 29 64 38 43	47 36 62	87 69
28	97 22	94	78 45 90 83 28 74 55	64 77 27 31 79	6	0	3	12 36
29	41	6	73	81 60 67 72 49 59 60 14	92 36 18 32	52 99 35	31 59
30	61	81	45	86 85 68 80 59 48 50 21 12 22	63 88	33 87 47	47 39
31	99 55	74	2 43 74	18 28	8 40 97 43 37 25 31	67	89	3	57 20
32	79 33	58 46 85 87 15 66 59 97 51	5 32 76 39	24 21 39	56 77
33	56 93	29 63 64	99 87 44	38 95	3	4 23 77	58	41 20 54	40	4
•	82	94
31 73	97	58	10 45 61 64 25 44	9 65 63 81 85
30 34	64 21 54	91 82	1 27	11 83 93 29	49 89 72
36 53 93	73 16
367
36	0 73	10 14 26 97	39 35 16 24	16 89 47 96 89	80	4	90	74 50
37	67	71	90 28	42 71	54	38	90	82 77 57 43 59 18	41 76 64	7 35
38	5 57	6	5 27 29 85 52 73 95	9 63 79 73 23	72 63 87	9 51
39	52 72	13 66 47 53 26 91	16 74	95	3	4	90 61	2 60 35	66 72
40	85 29	84 70 59 14 30 70 39 85 30 29 43 64	45	34 51 60	54	62
41	92 88	77	5 50 24 61 42 35 42 96 66 78	3 51	36 49	6	1 25
42	17	94	81	10	7 21	62	13 23 32 54	51 84	1 49	79 66 49	23	15
43	47	87	14 76 79 45 26 19 35 94 34	81 65 25 89	31 56	7	95 62
44	47	39	5 78	10 74	85 78	0 69 55 99 64 33 81	48 37 72	88	0
45	40	58	10 94	7 11 78 89 47 27 25 19 35	7 20	91	0 38	39 94
46	20 39	65 71 90 49 96 75 86 80 81 59 92 77	56	27	91 99	6 66
47	35 81	12 63	16 40 75	94	13 89	12	96 83 67	88	31 69 70	45 21
48	52	51	47 64 24	67	13 22 16 22 23 79 84	36 96	13 77 97	9	87
49	53 60	83 26 35 46 93 72 54	1 57 96 50 20 88	42	6 77	37 25
50	10 63	78 32 30 64	96 35 26 54 55 30 28 19 81	9 10 15	76 44
51	95	9	11 90 80 36	5 83 84	90 95 66 13 58 51	57 81 70	81	3
52	59	4	81 70 18	97	62	5 31 71 96 28 90	2	61	61 34 69	62 66
53	5 90	1 43 62	92	17	14	82 25 31 67 60 90 82	21 40 30	42 21
54	10 89	83 92	66 53 48 47 25 39 54	99 89 30 85	70	9	1	17 51
55	51 69	73 85 38	9	19 50 16 23 92 75 79 34	86	35 64 33	88 96
56	19 17	6 13 96 98	87	97	3	8	18 80 10 80 16	26 20 40	80	88
57	76 11	17 58 27	85 92	47	90 55 12 63 42	91 37	2 59 13	64	89
58	649	90 69 54	95 48	34 58 48 53 89 87	98 45	2 97 38	83	11
59	26 90	33 82	69 34 37	16 77 31 52 86 40 17 59	81 52	60	36 65
60	24 48	21 67 22 25 19 18	88 78	4 67 91 19 75	96 36 37	16	1
Ali	94 77
55 37	67	68	16 19 89 70	6 86 97 80 78	5 97
62 82 77	85 10 20 64	9 22	91 22 38	36	63 55	0
27 66 11	96 96
250
lic	94	50	91 53 36 37 92 46 72 62 44 26 39 65 66	86 12 33	89 84
64	95	9	65 51 45 43 72	63 75	6 20 31	99 67 29	64 39 79	47 38
65	92 55	78 86	5 65	16 97 64	78 12	90 31 46 15	37 23 83	63 88
 
TEST4.DAT	March 8, 1998	Page 2
 

 
74
75
76	(D). MERGE SORT:
77	*Time Started: 0.000
78	*Time Ended: 3.140
79	*Total time during Merge Sort run: 3.140
80
81
82	(E). Here are the sorted numbers using MERGE SORT:
83
84	Array Size = 1001
85
86	0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2
87	2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3
88	4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5
89	6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7
90	8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10
91	10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12
92	13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15
93	15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17
94	17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 19 19 19
95	19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 20 21 21
96	21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 22 22 22 22
97	22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 25
98	25 25 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 26 27 27
4100
27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28 29 29 29 29  
29 29 29 29 30 30 30 30 30 30 30 30 30 31 31 31 31 31 31 31
101	31 31 31 31 32 32 32 32 33 33 33 33 33 33 33 33 34 34 34 34
102	34 34 34 35 35 35 35 35 35 35 35 35 35 35 35 35 36 36 36 36
103	36 36 36 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37 37
104	37 37 38 38 38 36 38 38 38 38 38 38 38 39 39 39 39 39 39 39
105	39 39 39 39 39 39 40 40 40 40 40 40 40 41 41 41 41 41 42 42
106	42 42 42 42 42 42 42 42 43 43 43 43 43 43 43 43 43 44 44 44
107	44 44 44 45 45 45 45 45 45 45 45 45 45 45 46 46 46 46 46 46
108	47 47 47 47 47 47 47 47 47 47 47 47 47 47 48 48 48 48 48 48
109	48 48 49 49 49 49 49 49 49 49 49 50 50 50 50 50 50 50 50 50
110	51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 52 52 52 52 52
111	52 52 53 53 53 53 53 53 53 53 53 53 54 54 54 54 54 54 54 54
112	54 54 55 55 55 55 55 55 55 55 55 55 55 56 56 56 56 56 56 56
113	57 57 57 57 57 57 57 57 58 58 58 58 58 58 58 58 59 59 59 59
114	59 59 59 59 59 59 59 59 59 59 60 60 60 60 60 60 60 60 60 61
115	61 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 62 62 62 62
116	62 62 63 63 63 63 63 63 63 63 63 63 63 63 64 64 64 64 64 64
117	64 64 64 64 64 64 64 64 64 64 64 64 64 65 65 65 65 65 65 65
118	65 65 65 65 65 66 66 66 66 66 66 66 66 66 66 66 66 67 67 67
119	67 67 67 67 67 67 67 67 67 68 68 68 69 69 69 69 69 69 69 70
120	70 70 70 70 70 70 70 71 71 71 71 71 72 72 72 72 72 72 72 72
121	72 72 72 72 73 73 73 73 73 73 73 73 73 74 74 74 74 74 74 74
122	74 74 74 74 75 75 75 75 75 75 75 75 75 76 76 76 76 76 77 77
123	77 77 77 77 77 77 77 77 77 77 77 78 78 78 76 76 78 78 78 78
124	78 78 78 79 79 79 79 79 79 79 79 79 79 79 79 80 80 80 80 80
125	80 80 80 80 80 80 81 81 81 81 81 81 81 81 81 81 81 81 81 81
81 82 82 82 82 82 82 82 82 82 82 82 82 83 83 83 83 83 83 83
83 83 83 83 84 84 84 84 84 85 85 85 85 85 85 85 85 85 85 85
.28	85 85 85 85 85 85 85 85 86 86 86 86 86 86 86 86 87 87 87 87
129	87 87 87 87 87 87 87 87 88 88 88 88 88 88 88 88 88 88 88 88
130	89 89 89 89 89 89 89 89 89 89 89 89 89 89 90 90 90 90 90 90
 

 	 	 	 	 	 	 	 	 	 	March	8,	1998	 	 	 	 	Page
90	90	90	90	90	90	90	90	91	91	91	91	91	91 91	91	91	92	92	 
92	92	92	92	92	92	92	92	92	92	92	93	93	93 93	93	93	93	94	 
94	94	94	94	94	94	94	94	95	95	95 95	95	95 95	95	95	96	96	 
96	96	96	96	96	96	96	96	96	96	96 96	97	97	97	97	97	97	97	 
97	97	97	97	97	97	98	98	98	99	99 99	99	99 99	99	99	99	99	 
38 *MEDIAN (after the array is sorted) is 52.
139 *NUMBER OF INVERSION(S) (after sort): 0
140
141 (F). FINDING THE PARTITIONING ELEMENT:
142
143 *Here is the point at which the PIVOT element equals the MEDIAN element:
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
5
66
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
0
 1  
2  
93  
194
195
 
TEST4.DAT	March 8, 1998	Page 4
196
197
198
199
200
2
4101
203
204
205
206
207
208
209
210	*MEDIAN	(after the array is sorted)	is 50.
*NUMBER OF INVERSION(S)	(after sort)	in 1001 element array:	30003.0.
*Time Started:	1.370
*Time Ended:	2.790
*Total time it took to find the Partition element:	1.420
*After the array is partitioned and the pivot element
equals the median,	the array is finally sorted using the 
pivot element which allows the left and right sides of the 
array to be sorted.
Array Size = 1001
211	0	0	0	0	0	0	0	0	0	1	1	1	1	1	1	1	1	1	1	2
212	2	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	3	3
213	4	4	4	4	4	4	4	4	4	5	5	5	5	5	5	5	5	5	5	5
214	6	6	6	6	6	6	6	6	6	6	6	6	7	7	7	7	7	7	7	7
215	8	8	6	9	9	9	9	9	9	9	9	9	9	10	10	10	10	10	10	10
216	10	10	10	11	11	11	11	11	11	11	12	12	12	12	12	12	12	12	12	12
217	13	13	13	13	13	13	13	13	13	13	14	14	14	14	14	14	15	15	15	15
218	15	15	15	16	16	16	16	16	16	16	16	16	16	16	16	16	17	17	17	17
219	17	17	17	17	17	17	18	18	18	18	18	18	18	18	18	18	18	19	19	19
220	19	19	19	19	19	19	19	20	20	20	20	20	20	20	20	20	20	20	21	21
221	21	21	21	21	21	21	22	22	22	22	22	22	22	22	22	22	22	22	22	22
222	22	23	23	23	23	23	23	23	23	23	23	24	24	24	24	24	24	24	24	25
223	25	25	25	25	25	25	25	25	25	26	26	26	26	26	26	26	26	26	27	27
224	27	27	27	27	27	27	27	27	28	28	28	28	28	28	28	28	29	29	29	29
225	29	29	29	29	30	30	30	30	30	30	30	30	30	31	31	31	31	31	31	31
226	31	31	31	31	32	32	32	32	33	33	33	33	33	33	33	33	34	34	34	34
227	34	34	34	35	35	35	35	35	35	35	35	35	35	35	35	35	36	36	36	36
228	36	36	36	36	36	36	36	36	36	36	37	37	37	37	37	37	37	37	37	37
4119	37	37	38	38	38	38	38	38	38	38	38	38	38	39	39	39	39	39	39	39
411,0	39	39	39	39	39	39	40	40	40	40	40	40	40	41	41	41	41	41	42	42
231	42	42	42	42	42	42	42	42	43	43	43	43	43	43	43	43	43	44	44	44
232	44	44	44	45	45	45	45	45	45	45	45	45	45	45	46	46	46	46	46	46
233	47	47	47	47	47	47	47	47	47	47	47	47	47	47	48	48	48	48	48	48
234	48	48	49	49	49	49	49	49	49	49	49	50	50	50	50	50	50	50	50	50
235	51	51	51	51	51	51	51	51	51	51	51	51	51	51	51	52	52	52	52	52
236	52	52	53	53	53	53	53	53	53	53	53	53	54	54	54	54	54	54	54	54
237	54	54	55	55	55	55	55	55	55	55	55	55	55	56	56	56	56	56	56	56
238	57	57	57	57	57	57	57	57	58	58	58	58	58	58	58	58	59	59	59	59
239	59	59	59	59	59	59	59	59	59	59	60	60	60	60	60	60	60	60	60	61
240	61	61	61	61	61	61	61	61	61	61	62	62	62	62	62	62	62	62	62	62
241	62	62	63	63	63	63	63	63	63	63	63	63	63	63	64	64	64	64	64	64
242	64	64	64	64	64	64	64	64	64	64	64	64	64	65	65	65	65	65	65	65
243	65	65	65	65	65	66	66	66	66	66	66	66	66	66	66	66	66	67	67	67
244	67	67	67	67	67	67	67	67	67	68	68	68	69	69	69	69	69	69	69	70
245	70	70	70	70	70	70	70	71	71	71	71	71	72	72	72	72	72	72	72	72
246	72	72	72	72	73	73	73	73	73	73	73	73	73	74	74	74	74	74	74	74
247	74	74	74	74	75	75	75	75	75	75	75	75	75	76	76	76	76	76	77	77
248	77	77	77	77	77	77	77	77	77	77	77	78	78	78	78	78	78	78	78	78
249	78	78	78	79	79	79	79	79	79	79	79	79	79	79	79	80	80	80	80	80
250	80	80	80	80	80	60	81	81	81	81	81	81	81	81	81	81	81	81	81	81
251	81	62	82	82	82	82	82	82	82	82	82	82	82	83	83	83	83	83	83	83
252	83	83	83	83	84	84	84	84	84	85	85	85	85	85	85	85	85	85	65	85
253	85	85	85	85	85	85	85	85	86	86	86	86	86	86	86	86	87	87	87	87
254	87	87	87	87	87	87	87	87	88	88	88	88	88	88	88	88	88	88	88	88
255	89	89	89	89	89	89	89	89	89	89	89	89	89	89	90	90	90	90	90	90
7
411,6	90
92	90
92	90
92	90
92	90
92	90
92	90
92	90
92	90
92	91
92	91
92	91
92	91
93	91
93	91
93	91
93	91
93	91
93	92
93	92
94
458	94	94	94	94	94	94	94	94	94	95	95	95	95	95	95	95	95	95	96	96
259	96	96	96	96	96	96	96	96	96	96	96	96	96	97	97	97	97	97	97	97
260	97	97	97	97	97	97	97	98	98	98	99	99	99	99	99	99	99	99	99	99
 
TEST4.DAT	March 8, 1998	Page 5
261	99
262
263
264
265 (G). DATA ANALYSIS:
4076	********* MEAN *********
268 The mean is the average value of the data items. The mean is equal
269 to the total of all the data items divided by the number of data items (1001).
270 The mean value for this run is 51225 0 /1001 = 51.17.
271
272
273
•
•
 
SECTION IV
RUN TIME COMPARISONS BETWEEN 
QUICK SORT(PARTITION) AND MERGE SORT 
(increase by 4 powers of 10)
Part. Merge	Part. Merge	Part. Merge	Part. Merge
# of  
runs	N = 1	N = 1	DIFF.	N=11	N=11	DIFF.	N=
101	N=
101	01FF.	N=
1001	N=
1001	DIFF.
#1	0.00	0.00	0.00	0.050	0.010	0.040	.490	.220	.170	1.42	3.14	1.72
#2	0.00	0.00	0.00	0.048	0.000	0.048	.430	.246	.184	1.20	3.40	2.20
#3	0.00	0.00	0.00	0.050	0.000	0.050	.434	.234	.200	1.29	3.11	1.82
#4	0.00	0.00	0.00	0.045	0.010	0.035	.456	.239	.217	1.36	3.19	1.83
#5	0.00	0.00	0.00	0.040	0.010	0.030	.494	.213	.281	1.43	3.16	1.73
#6	0.00	0.00	0.00	0.050	0.000	0.050	.424	.223	.201	1.41	3.11	1.70
#7	0.00	0.00	0.00	0.044	0.010	0.034	.445	.265	.180	1.50	3.14	1.64
#8	0.00	0.00	0.00	0.050	0.010	0.040	.492	.223	.269	1.41	3.19	1.78
#9	0.00	0.00	0.00	0.055	0.010	0.044	.430	.245	.185	1.39	3.20	1.81
#10	0.00	0.00	0.00	0.044	0.010	0.033	.454	.234	.220	1.22	3.21	1.99
#11	0.00	0.00	0.00	0.050	0.000	0.050	.476	.249	.227	1.26	3.23	1.97
#12	0.00	0.00	0.00	0.040	0.010	0.030	.494	.213	.281	1.21	3.21	2.00
#13	0.00	0.00	0.00	0.050	0.000	0.050	.494	.308	.186	1.40	3.21	1.81
#14	0.00	0.00	0.00	0.044	0.010	0.033	.445	.265	.180	1.31	3.26	1.95
#15	0.00	0.00	0.00	0.050	0.010	0.040	.490	.220	.270	1.21	3.16	1.95
#16	0.00	0.00	0.00	0.055	0.010	0.044	.466	.204	.262	1.31	3.19	1.88
#17	0.00	0.00	0.00	0.044	0.010	0.033	.489	.217	.272	1.36	3.18	1.82
#18	0.00	0.00	0.00	0.050	0.000	0.050	.486	.223	.263	1.30	3.07	1.77
#19	0.00	0.00	0.00	0.043	0.010	0.033	.499	.287	.212	1.41	3.24	1.83
#20	0.00	0.00	0.00	0.050	0.010	0.040	.446	.211	.235	1.47	3.07	1.60
AVG.	0.00	0.00	0.00	.0045	.0725	0.041	110	.466	.237	1.28	3.18	 

Note: All run times are calculated on a Compac Pentium 100 using Borland C++ 4.02. When n = 1, 11, and 101, a for loop of 500  
was used to counter act the speed of the pentium processor. When the for loop was not implemented, the result was 0.00 every time.  
Now the sorts are done 500 times to give me a longer reading but something that! am able to use when comparing run times. When n  
= 1001,1 used a for loop of 50 because the system kept generating a system error message when 500 was used.
 
SECTION V
Ratio of Inversions Chart on Random Cases of Fixed Data Sizes
Partitioning Ai g.
Array Size	Merge	Partition	Inversions 
Before	Inversions 
After	Inversions 
Before	Inversions 
After
N = 1	0	0	0	0	0	0
N = 11	.10	.90	15	0	15	3
N = 101	.430	.226	2,463	0	2,463	244
N = 1001	3.13	1.67	277,061	0	277,061	30,003
N = 1	0	0	0	0	0	0
N = 11	.17	.88	25	0	25	4
N = 101	.429	.234	2,669	0	2,669	188
N = 1001	3.15	1.34	242,987	0	242,987	36,098
N = 1	0	0	0	0	0	0
N = 11	.10	.90	18	0	18	4
N = 101	.430	.226	2,449	0	2,449	399
N = 1001	3.13	1.67	247,861	0	247,861	12,154
N = 1	0	0	0	0	0	0
N = 11	.14	.87	29	0	29	2
N= 101	.499	.254	2,873	0	2,873	286
N= 1001	3.75	1.94	243,983	0	243,983	27,456
N=1	0	0	0	0	0	0
N = 11	.10	.78	9	0	9	6
N = 101	.428	.222	2,376	0	2,376	211
N = 1001	3.92	1.54	241,102	0	241,102	25,875
 
SECTION VI
Sort Comparison Analysis of Average Run Time for 
Merge/Partition Sort
A.	Average Merge Sort Time vs. Predicted Merge Sort Time
B.	Average Partition Sort Time vs. Predicted Merge Sort Time
C.	Average Merge Sort Time vs. Average Partition Sort Time when n = 1
D.	Average Merge Sort Time vs. Average Partition Sort Time when n = 11
E.	Average Merge Sort Time vs. Average Partition Sort Time when n = 101
F.	Average Merge Sort Time vs. Average Partition Sort Time when n = 1001

TIMES:	Average Merge 
Sort	Predicted 
Merge Sort	Average 
Partition Sort	Predicted 
Partition Sort
N = 1	0.00	500(NLog2N) - 
all cases	0.00	500(N*N) - 
worst case
N = 11	0725	500(NLog2N)- 
all cases	0450	500(N*N) - 
worst case
N = 101	2369	500(NLog2N) - 
all cases	4667	500(N*N) - 
worst case
N = 1001	3.180	500(NLog2N) - 
all cases	1.280	500(NLog2N) - 
average case

Note: A reminder that a for loop with 500 iterations was used to compensate for the fast speed of the Pentium Processor. This allowed me to see some form of of time being registered as the speed of the sort. That is why I used 500 as a constant in the predicted cases. 

